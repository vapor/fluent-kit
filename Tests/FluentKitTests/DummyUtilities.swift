import FluentKit
import FluentSQL
import NIO
import SQLKit

public class DummyDatabaseForTestSQLSerializer: DatabaseDriver {
    public var eventLoopGroup: EventLoopGroup
    public var sqlSerializers: [SQLSerializer]

    public init(on eventLoopGroup: EventLoopGroup = EmbeddedEventLoop()) {
        self.eventLoopGroup = eventLoopGroup
        self.sqlSerializers = []
    }
    
    public func reset() {
        self.sqlSerializers = []
    }
    
    public func execute(query: DatabaseQuery, database: Database, onRow: @escaping (DatabaseRow) -> ()) -> EventLoopFuture<Void> {
        var sqlSerializer = SQLSerializer(dialect: DummyDatabaseDialect())
        let sqlExpression = SQLQueryConverter(delegate: DummyDatabaseConverterDelegate()).convert(query)
        sqlExpression.serialize(to: &sqlSerializer)
        self.sqlSerializers.append(sqlSerializer)
        return database.eventLoop.makeSucceededFuture(())
    }
    
    public func execute(schema: DatabaseSchema, database: Database) -> EventLoopFuture<Void> {
        var sqlSerializer = SQLSerializer(dialect: DummyDatabaseDialect())
        let sqlExpression = SQLSchemaConverter(delegate: DummyDatabaseConverterDelegate()).convert(schema)
        sqlExpression.serialize(to: &sqlSerializer)
        self.sqlSerializers.append(sqlSerializer)
        return database.eventLoop.makeSucceededFuture(())
    }

    public func shutdown() {
        //
    }
}

// Copy from PostgresDialect
struct DummyDatabaseDialect: SQLDialect {
    private var bindOffset: Int

    init() {
        self.bindOffset = 0
    }

    var identifierQuote: SQLExpression {
        return SQLRaw("\"")
    }

    var literalStringQuote: SQLExpression {
        return SQLRaw("'")
    }

    mutating func nextBindPlaceholder() -> SQLExpression {
        self.bindOffset += 1
        return SQLRaw("$" + self.bindOffset.description)
    }

    func literalBoolean(_ value: Bool) -> SQLExpression {
        switch value {
        case false:
            return SQLRaw("false")
        case true:
            return SQLRaw("true")
        }
    }

    var autoIncrementClause: SQLExpression {
        return SQLRaw("GENERATED BY DEFAULT AS IDENTITY")
    }
}

// Copy from PostgresConverterDelegate
struct DummyDatabaseConverterDelegate: SQLConverterDelegate {
    func customDataType(_ dataType: DatabaseSchema.DataType) -> SQLExpression? {
        switch dataType {
        case .uuid:
            return SQLRaw("UUID")
        case .bool:
            return SQLRaw("BOOL")
        case .data:
            return SQLRaw("BYTEA")
        case .datetime:
            return SQLRaw("TIMESTAMPTZ")
        default:
            return nil
        }
    }

    func nestedFieldExpression(_ column: String, _ path: [String]) -> SQLExpression {
        return SQLRaw("\(column)->>'\(path[0])'")
    }
}
